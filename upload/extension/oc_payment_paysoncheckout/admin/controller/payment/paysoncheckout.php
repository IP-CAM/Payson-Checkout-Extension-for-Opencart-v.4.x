<?phpnamespace Opencart\Admin\Controller\Extension\OcPaymentPaysoncheckout\Payment;class PaysonCheckout extends \Opencart\System\Engine\Controller {    private $error = array();    private $code_payson_notify_status = 'payson_notify_status';    private $code_payson_one_pay_checkout = 'payson_one_pay_checkout';    public function index(): void {        $this->load->language('extension/oc_payment_paysoncheckout/payment/paysoncheckout');        $this->document->setTitle($this->language->get('heading_title'));        //Load the settings model. You can also add any other models you want to load here.        $this->load->model('setting/setting');        $data['text_modul_name'] = $this->language->get('text_modul_name');        $data['entry_method_mode'] = $this->language->get('entry_method_mode');        $data['paysoncheckout_method_mode'] = $this->language->get('payment_method_mode');        $data['help_method_mode'] = $this->language->get('help_method_mode');        $data['merchant_id'] = $this->language->get('merchant_id');        $data['help_merchant_id'] = $this->language->get('help_merchant_id');        $data['terms_and_conditions'] = $this->language->get('terms_and_conditions');        $data['help_terms_and_conditions'] = $this->language->get('help_terms_and_conditions');        $data['api_key'] = $this->language->get('api_key');        $data['help_api_key'] = $this->language->get('help_api_key');        $data['entry_logg'] = $this->language->get('entry_logg');        $data['help_logg'] = $this->language->get('help_logg');        $data['entry_total'] = $this->language->get('entry_total');        $data['help_total'] = $this->language->get('help_total');        $data['entry_geo_zone'] = $this->language->get('entry_geo_zone');        $data['entry_verification'] = $this->language->get('entry_verification');        $data['help_verification'] = $this->language->get('help_verification');        $data['entry_logotype'] = $this->language->get('entry_logotype');        $data['text_logotype_yes_left'] = $this->language->get('text_logotype_yes_left');        $data['text_logotype_yes_right'] = $this->language->get('text_logotype_yes_right');        $data['text_logotype_no'] = $this->language->get('text_logotype_no');        $data['help_logotype'] = $this->language->get('help_logotype');        $data['entry_show_receipt_page'] = $this->language->get('entry_show_receipt_page');        $data['help_receipt'] = $this->language->get('help_receipt');        $data['entry_product_out_of_stock'] = $this->language->get('entry_product_out_of_stock');        $data['help_product_out_of_stock'] = $this->language->get('help_product_out_of_stock');        $data['entry_price_mismatch'] = $this->language->get('entry_price_mismatch');        $data['help_price_mismatch'] = $this->language->get('help_price_mismatch');        $data['entry_enable_one_page_checkout'] = $this->language->get('entry_enable_one_page_checkout');        $data['help_enable_one_page_checkout'] = $this->language->get('help_enable_one_page_checkout');        $data['entry_order_item_details_to_ignore'] = $this->language->get('entry_order_item_details_to_ignore');        $data['entry_totals_to_ignore'] = $this->language->get('entry_totals_to_ignore');        $data['help_totals_to_ignore'] = $this->language->get('help_totals_to_ignore');        $data['entry_countries'] = $this->language->get('entry_countries');        $data['help__countries'] = $this->language->get('help__countries');        $data['entry_order_status'] = $this->language->get('entry_order_status');        $data['entry_color_scheme'] = $this->language->get('entry_color_scheme');        $data['text_color_scheme_gray'] = $this->language->get('text_color_scheme_gray');        $data['text_color_scheme_white'] = $this->language->get('text_color_scheme_white');        $data['help_color_scheme'] = $this->language->get('help_color_scheme');        $data['entry_iframe_size_width'] = $this->language->get('entry_iframe_size_width');        $data['entry_iframe_size_width_type'] = $this->language->get('entry_iframe_size_width_type');        $data['text_iframe_size_width_percent'] = $this->language->get('text_iframe_size_width_percent');        $data['text_iframe_size_width_px'] = $this->language->get('text_iframe_size_width_px');        $data['entry_iframe_size_height'] = $this->language->get('entry_iframe_size_height');        $data['entry_iframe_size_height_type'] = $this->language->get('entry_iframe_size_height_type');        $data['text_iframe_size_height_percent'] = $this->language->get('text_iframe_size_height_percent');        $data['text_iframe_size_height_px'] = $this->language->get('text_iframe_size_height_px');        $data['help_iframe_size_height'] = $this->language->get('help_iframe_size_height');        $data['help_iframe_size_width'] = $this->language->get('help_iframe_size_width');        $data['help_iframe_size_height_type'] = $this->language->get('help_iframe_size_height_type');        $data['help_iframe_size_width_type'] = $this->language->get('help_iframe_size_width_type');        if (isset($this->error['warning'])) {            $data['error_warning'] = $this->error['warning'];        } else {            $data['error_warning'] = '';        }        if (isset($this->error['merchant_id'])) {            $data['error_merchant_id'] = $this->error['merchant_id'];        } else {            $data['error_merchant_id'] = '';        }        if (isset($this->error['api_key'])) {            $data['error_api_key'] = $this->error['api_key'];        } else {            $data['error_api_key'] = '';        }        if (isset($this->error['ignore_order_totals'])) {            $data['error_ignore_order_totals'] = $this->error['ignore_order_totals'];        } else {            $data['error_ignore_order_totals'] = '';        }        $data['breadcrumbs'] = [];        $data['breadcrumbs'][] = [            'text' => $this->language->get('text_home'),            'href' => $this->url->link('common/dashboard', 'user_token=' . $this->session->data['user_token'], true)        ];        $data['breadcrumbs'][] = [            'text' => $this->language->get('text_extension'),            'href' => $this->url->link('marketplace/extension', 'user_token=' . $this->session->data['user_token'] . '&type=payment', true)        ];        $data['breadcrumbs'][] = [            'text' => $this->language->get('heading_title'),            'href' => $this->url->link('extension/oc_payment_paysoncheckout/payment/paysoncheckout', 'user_token=' . $this->session->data['user_token'], true)        ];        $data['save'] = $this->url->link('extension/oc_payment_paysoncheckout/payment/paysoncheckout|save', 'user_token=' . $this->session->data['user_token'], true);        $data['back'] = $this->url->link('marketplace/extension', 'user_token=' . $this->session->data['user_token'] . '&type=payment', true);        if (isset($this->request->post['payment_paysoncheckout_merchant_id'])) {            $data['payment_paysoncheckout_merchant_id'] = $this->request->post['payment_paysoncheckout_merchant_id'];        } elseif ($this->config->get('payment_paysoncheckout_merchant_id') != null) {            $data['payment_paysoncheckout_merchant_id'] = $this->config->get('payment_paysoncheckout_merchant_id');        } else {            $data['payment_paysoncheckout_merchant_id'] = '4';        }        if (isset($this->request->post['payment_paysoncheckout_api_key'])) {            $data['payment_paysoncheckout_api_key'] = $this->request->post['payment_paysoncheckout_api_key'];        } elseif ($this->config->get('payment_paysoncheckout_api_key') != null) {            $data['payment_paysoncheckout_api_key'] = $this->config->get('payment_paysoncheckout_api_key');        } else {            $data['payment_paysoncheckout_api_key'] = '2acab30d-fe50-426f-90d7-8c60a7eb31d4';        }        if (isset($this->request->post['payment_paysoncheckout_method_mode'])) {            $data['payment_paysoncheckout_method_mode'] = $this->request->post['payment_paysoncheckout_method_mode'];        } else {            $data['payment_paysoncheckout_method_mode'] = $this->config->get('payment_paysoncheckout_method_mode');        }        if (isset($this->request->post['payment_paysoncheckout_logg'])) {            $data['payment_paysoncheckout_logg'] = $this->request->post['payment_paysoncheckout_logg'];        } else {            $data['payment_paysoncheckout_logg'] = $this->config->get('payment_paysoncheckout_logg');        }        if (isset($this->request->post['payment_paysoncheckout_total'])) {            $data['payment_paysoncheckout_total'] = $this->request->post['payment_paysoncheckout_total'];        } else {            $data['payment_paysoncheckout_total'] = $this->config->get('payment_paysoncheckout_total');        }        if (isset($this->request->post['payment_paysoncheckout_gui_verification'])) {            $data['payment_paysoncheckout_gui_verification'] = $this->request->post['payment_paysoncheckout_gui_verification'];        } else {            $data['payment_paysoncheckout_gui_verification'] = $this->config->get('payment_paysoncheckout_gui_verification');        }        if (isset($this->request->post['payment_paysoncheckout_logotype'])) {            $data['payment_paysoncheckout_logotype'] = $this->request->post['payment_paysoncheckout_logotype'];        } else {            $data['payment_paysoncheckout_logotype'] = $this->config->get('payment_paysoncheckout_logotype');        }        if (isset($this->request->post['payment_paysoncheckout_receipt'])) {            $data['payment_paysoncheckout_receipt'] = $this->request->post['payment_paysoncheckout_receipt'];        } else {            $data['payment_paysoncheckout_receipt'] = $this->config->get('payment_paysoncheckout_receipt');        }        if (isset($this->request->post['payment_paysoncheckout_out_of_stock'])) {            $data['payment_paysoncheckout_out_of_stock'] = $this->request->post['payment_paysoncheckout_out_of_stock'];        } else {            $data['payment_paysoncheckout_out_of_stock'] = $this->config->get('payment_paysoncheckout_out_of_stock');        }        if (isset($this->request->post['payment_paysoncheckout_price_mismatch'])) {            $data['payment_paysoncheckout_price_mismatch'] = $this->request->post['payment_paysoncheckout_price_mismatch'];        } else {            $data['payment_paysoncheckout_price_mismatch'] = $this->config->get('payment_paysoncheckout_price_mismatch');        }        if (isset($this->request->post['payment_paysoncheckout_one_page_checkout'])) {            $data['payment_paysoncheckout_one_page_checkout'] = $this->request->post['payment_paysoncheckout_one_page_checkout'];        } elseif ($this->config->get('payment_paysoncheckout_one_page_checkout') !== null) {            $data['payment_paysoncheckout_one_page_checkout'] = $this->config->get('payment_paysoncheckout_one_page_checkout');        } else {            $data['payment_paysoncheckout_one_page_checkout'] = 0;        }        if (isset($this->request->post['payment_paysoncheckout_ignore_order_totals'])) {            $data['payment_paysoncheckout_ignore_order_totals'] = $this->request->post['payment_paysoncheckout_ignore_order_totals'];        } else {            if ($this->config->get('payment_paysoncheckout_ignore_order_totals') == null) {                $data['payment_paysoncheckout_ignore_order_totals'] = 'sub_total, total, taxes, tax';            } else {                $data['payment_paysoncheckout_ignore_order_totals'] = $this->config->get('payment_paysoncheckout_ignore_order_totals');            }        }        if (isset($this->request->post['payment_paysoncheckout_countries'])) {            $data['payment_paysoncheckout_countries'] = $this->request->post['payment_paysoncheckout_countries'];        } else {            if ($this->config->get('payment_paysoncheckout_countries') == null) {                $data['payment_paysoncheckout_countries'] = 'SE,NO,DK,FI';            } else {                $data['payment_paysoncheckout_countries'] = $this->config->get('payment_paysoncheckout_countries');            }        }        if (isset($this->request->post['payment_paysoncheckout_order_status_id'])) {            $data['payment_paysoncheckout_order_status_id'] = $this->request->post['payment_paysoncheckout_order_status_id'];        } else {            if ($this->config->get('payment_paysoncheckout_order_status_id') == Null) {                $data['payment_paysoncheckout_order_status_id'] = 1;            } else {                $data['payment_paysoncheckout_order_status_id'] = $this->config->get('payment_paysoncheckout_order_status_id');            }        }        if (isset($this->request->post['payment_paysoncheckout_order_status_shipped_id'])) {            $data['payment_paysoncheckout_order_status_shipped_id'] = $this->request->post['payment_paysoncheckout_order_status_shipped_id'];        } else {            if ($this->config->get('payment_paysoncheckout_order_status_shipped_id') == Null) {                $data['payment_paysoncheckout_order_status_shipped_id'] = 1;            } else {                $data['payment_paysoncheckout_order_status_shipped_id'] = $this->config->get('payment_paysoncheckout_order_status_shipped_id');            }        }        if (isset($this->request->post['payment_paysoncheckout_order_status_canceled_id'])) {            $data['payment_paysoncheckout_order_status_canceled_id'] = $this->request->post['payment_paysoncheckout_order_status_canceled_id'];        } else {            if ($this->config->get('payment_paysoncheckout_order_status_canceled_id') == Null) {                $data['payment_paysoncheckout_order_status_canceled_id'] = 1;            } else {                $data['payment_paysoncheckout_order_status_canceled_id'] = $this->config->get('payment_paysoncheckout_order_status_canceled_id');            }        }        if (isset($this->request->post['payment_paysoncheckout_order_status_refunded_id'])) {            $data['payment_paysoncheckout_order_status_refunded_id'] = $this->request->post['payment_paysoncheckout_order_status_refunded_id'];        } else {            if ($this->config->get('payment_paysoncheckout_order_status_refunded_id') == Null) {                $data['payment_paysoncheckout_order_status_refunded_id'] = 1;            } else {                $data['payment_paysoncheckout_order_status_refunded_id'] = $this->config->get('payment_paysoncheckout_order_status_refunded_id');            }        }        if (isset($this->request->post['payment_paysoncheckout_color_scheme'])) {            $data['payment_paysoncheckout_color_scheme'] = $this->request->post['payment_paysoncheckout_color_scheme'];        } else {            $data['payment_paysoncheckout_color_scheme'] = $this->config->get('payment_paysoncheckout_color_scheme');        }        if (isset($this->request->post['payment_paysoncheckout_iframe_size_width'])) {            $data['payment_paysoncheckout_iframe_size_width'] = $this->request->post['payment_paysoncheckout_iframe_size_width'];        } else {            if ($this->config->get('payment_paysoncheckout_iframe_size_width') == Null) {                $data['payment_paysoncheckout_iframe_size_width'] = '100';            } else {                $data['payment_paysoncheckout_iframe_size_width'] = $this->config->get('payment_paysoncheckout_iframe_size_width');            }        }        if (isset($this->request->post['payment_paysoncheckout_terms_and_conditions'])) {            $data['payment_paysoncheckout_terms_and_conditions'] = $this->request->post['payment_paysoncheckout_terms_and_conditions'];        } else {            if ($this->config->get('payment_paysoncheckout_terms_and_conditions') == Null) {                $data['payment_paysoncheckout_terms_and_conditions'] = '2';            } else {                $data['payment_paysoncheckout_terms_and_conditions'] = $this->config->get('payment_paysoncheckout_terms_and_conditions');            }        }        if (isset($this->request->post['payment_paysoncheckout_iframe_size_width_type'])) {            $data['payment_paysoncheckout_iframe_size_width_type'] = $this->request->post['payment_paysoncheckout_iframe_size_width_type'];        } else {            $data['payment_paysoncheckout_iframe_size_width_type'] = $this->config->get('payment_paysoncheckout_iframe_size_width_type');        }        if (isset($this->request->post['payment_paysoncheckout_iframe_size_height'])) {            $data['payment_paysoncheckout_iframe_size_height'] = $this->request->post['payment_paysoncheckout_iframe_size_height'];        } else {            if ($this->config->get('payment_paysoncheckout_iframe_size_height') == Null) {                $data['payment_paysoncheckout_iframe_size_height'] = '800';            } else {                $data['payment_paysoncheckout_iframe_size_height'] = $this->config->get('payment_paysoncheckout_iframe_size_height');            }        }        if (isset($this->request->post['payment_paysoncheckout_iframe_size_height_type'])) {            $data['payment_paysoncheckout_iframe_size_height_type'] = $this->request->post['payment_paysoncheckout_iframe_size_height_type'];        } else {            $data['payment_paysoncheckout_iframe_size_height_type'] = $this->config->get('payment_paysoncheckout_iframe_size_height_type');        }        $this->load->model('localisation/order_status');        $data['order_statuses'] = $this->model_localisation_order_status->getOrderStatuses();        if (isset($this->request->post['payment_paysoncheckout_geo_zone_id'])) {            $data['payment_paysoncheckout_geo_zone_id'] = $this->request->post['payment_paysoncheckout_geo_zone_id'];        } else {            $data['payment_paysoncheckout_geo_zone_id'] = $this->config->get('payment_paysoncheckout_geo_zone_id');        }        $this->load->model('localisation/geo_zone');        $data['geo_zones'] = $this->model_localisation_geo_zone->getGeoZones();        //input 3        $data['payment_paysoncheckout_status'] = $this->config->get('payment_paysoncheckout_status');        //input 4        $data['payment_paysoncheckout_sort_order'] = $this->config->get('payment_paysoncheckout_sort_order');        $data['header'] = $this->load->controller('common/header');        $data['column_left'] = $this->load->controller('common/column_left');        $data['footer'] = $this->load->controller('common/footer');        $this->response->setOutput($this->load->view('extension/oc_payment_paysoncheckout/payment/paysoncheckout', $data));    }    public function save(): void {        //$this->validateAccountInformation();        $this->load->language('extension/oc_payment_paysoncheckout/payment/paysoncheckout');        $json = [];        if (!$this->user->hasPermission('modify', 'extension/oc_payment_paysoncheckout/payment/paysoncheckout')) {            $json['error']['warning'] = $this->language->get('error_permission');        }        if (!$this->merchantValidation()) {            $json['error']['warning'] = $this->error['warning']['merchant_validation'];        }        if (!isset($this->request->post['payment_paysoncheckout_merchant_id']) || !$this->request->post['payment_paysoncheckout_merchant_id']) {            $json['error']['merchant_id'] = $this->language->get('error_merchant_id');        }        if (!isset($this->request->post['payment_paysoncheckout_api_key']) || !$this->request->post['payment_paysoncheckout_api_key']) {            $json['error']['api_key'] = $this->language->get('error_api_key');        }        if (isset($this->request->post['payment_paysoncheckout_ignore_order_totals']) and!$this->request->post['payment_paysoncheckout_ignore_order_totals']) {            $json['error']['ignored_order_totals'] = $this->language->get('error_ignored_order_totals');        }        if (!$json) {            $this->load->model('setting/setting');            $this->model_setting_setting->editSetting('payment_paysoncheckout', $this->request->post);            $json['success'] = $this->language->get('text_success');        }        $this->response->addHeader('Content-Type: application/json');        $this->response->setOutput(json_encode($json));    }    public function install(): void {        $this->load->model('setting/event');        $this->model_setting_event->deleteEventByCode($this->code_payson_notify_status);        $this->model_setting_event->deleteEventByCode($this->code_payson_one_pay_checkout);        $this->model_setting_event->addEvent(                ['code' => $this->code_payson_notify_status,                    'description' => 'Payson One Pay Notify Status',                    'trigger' => 'catalog/model/checkout/order/addHistory/after',                    'action' => 'extension/oc_payment_paysoncheckout/onecheckout/onecheckout.notifyStatusToPayson',                    'status' => 1,                    'sort_order' => 0]        );        $this->model_setting_event->addEvent(                ['code' => $this->code_payson_one_pay_checkout,                    'description' => 'Payson One Pay Checkout',                    'trigger' => 'catalog/view/checkout/checkout/before',                    'action' => 'extension/oc_payment_paysoncheckout/payment/paysoncheckout.viewCheckoutBefore',                    'status' => 1,                    'sort_order' => 0]        );        $this->model_setting_event->addEvent(                ['code' => $this->code_payson_one_pay_checkout,                    'description' => 'Payson One Pay Checkout',                    'trigger' => 'catalog/view/checkout/checkout/after',                    'action' => 'extension/oc_payment_paysoncheckout/payment/paysoncheckout.viewCheckoutAfter',                    'status' => 1,                    'sort_order' => 1]        );        $this->model_setting_setting->editValue('config', 'config_session_samesite', 'Lax');        $this->load->model('extension/oc_payment_paysoncheckout/payment/paysoncheckout');        $this->model_extension_oc_payment_paysoncheckout_payment_paysoncheckout->install();    }    public function uninstall(): void {        $this->load->model('setting/setting');        $this->load->model('setting/event');        $this->load->model('extension/oc_payment_paysoncheckout/payment/paysoncheckout');        $this->model_setting_event->deleteEventByCode($this->code_payson_notify_status);        $this->model_setting_event->deleteEventByCode($this->code_payson_one_pay_checkout);    }    private function merchantValidation() {        // Include library        require_once(\DIR_EXTENSION . 'oc_payment_paysoncheckout/system/library/paysonpayments/include.php');        $apiUrl = isset($this->request->post['payment_paysoncheckout_method_mode']) && $this->request->post['payment_paysoncheckout_method_mode'] >= 1 ? \Payson\Payments\Transport\Connector::PROD_BASE_URL : \Payson\Payments\Transport\Connector::TEST_BASE_URL;        //$apiUrl = printf(\Payson\Payments\Transport\Connector::%s_BASE_URL, $this->request->post['payment_paysoncheckout_method_mode'] < 1 ? TEST : PROD);        $merchants = explode('##', $this->request->post['payment_paysoncheckout_merchant_id']);        $keys = explode('##', $this->request->post['payment_paysoncheckout_api_key']);        try {            $i = 0;            foreach ($merchants as $merchant) {                // Init the connector                $connector = \Payson\Payments\Transport\Connector::init($merchant, $keys[$i], $apiUrl);                $checkoutClient = new \Payson\Payments\CheckoutClient($connector);                // Make the call                $checkoutClient->getAccountInfo();                $i += 1;            }            return 1;        } catch (\Exception $e) {            // Print error message            $this->log->write($e->getMessage() . '&#10;' . $e->getCode() . ' - merchantValidation - line: ' . __LINE__);            $this->error['warning']['merchant_validation'] = strtoupper($e->getMessage());            return 0;        }    }}